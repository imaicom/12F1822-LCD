

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Feb 24 14:19:17 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.41
    23                           ; Generated 25/01/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC12F1822 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  008C                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0097                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009E                     	;# 
    96  010C                     	;# 
    97  0111                     	;# 
    98  0112                     	;# 
    99  0115                     	;# 
   100  0116                     	;# 
   101  0117                     	;# 
   102  0118                     	;# 
   103  0119                     	;# 
   104  011A                     	;# 
   105  011B                     	;# 
   106  011D                     	;# 
   107  011D                     	;# 
   108  018C                     	;# 
   109  0191                     	;# 
   110  0191                     	;# 
   111  0192                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0193                     	;# 
   115  0194                     	;# 
   116  0195                     	;# 
   117  0196                     	;# 
   118  0199                     	;# 
   119  019A                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019B                     	;# 
   124  019C                     	;# 
   125  019C                     	;# 
   126  019D                     	;# 
   127  019E                     	;# 
   128  019F                     	;# 
   129  020C                     	;# 
   130  0211                     	;# 
   131  0211                     	;# 
   132  0212                     	;# 
   133  0212                     	;# 
   134  0213                     	;# 
   135  0213                     	;# 
   136  0214                     	;# 
   137  0214                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0215                     	;# 
   141  0216                     	;# 
   142  0216                     	;# 
   143  0217                     	;# 
   144  0217                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0294                     	;# 
   150  0295                     	;# 
   151  0295                     	;# 
   152  0296                     	;# 
   153  0391                     	;# 
   154  0392                     	;# 
   155  0393                     	;# 
   156  039A                     	;# 
   157  039C                     	;# 
   158  039D                     	;# 
   159  039E                     	;# 
   160  039F                     	;# 
   161  0FE4                     	;# 
   162  0FE5                     	;# 
   163  0FE6                     	;# 
   164  0FE7                     	;# 
   165  0FE8                     	;# 
   166  0FE9                     	;# 
   167  0FEA                     	;# 
   168  0FEB                     	;# 
   169  0FED                     	;# 
   170  0FEE                     	;# 
   171  0FEF                     	;# 
   172                           
   173                           	psect	idataBANK0
   174  070B                     __pidataBANK0:	
   175                           
   176                           ;initializer for main@F2209
   177  070B  344C               	retlw	76
   178  070C  3443               	retlw	67
   179  070D  3444               	retlw	68
   180  070E  3420               	retlw	32
   181  070F  3454               	retlw	84
   182  0710  3465               	retlw	101
   183  0711  3473               	retlw	115
   184  0712  3474               	retlw	116
   185  0713  3400               	retlw	0
   186  0011                     _PIR1bits	set	17
   187  000C                     _PORTA	set	12
   188  008C                     _TRISA	set	140
   189  0099                     _OSCCON	set	153
   190  04AF                     _nWPUEN	set	1199
   191  018C                     _ANSELA	set	396
   192  0211                     _SSP1BUF	set	529
   193  0216                     _SSP1CON2bits	set	534
   194  0215                     _SSP1CON1	set	533
   195  0212                     _SSP1ADD	set	530
   196  0214                     _SSP1STAT	set	532
   197  020C                     _WPUA	set	524
   198                           
   199                           	psect	stringtext
   200  0703                     __pstringtext:	
   201  0703                     STR_1:	
   202  0703  3449               	retlw	73	;'I'
   203  0704  3432               	retlw	50	;'2'
   204  0705  3443               	retlw	67	;'C'
   205  0706  3420               	retlw	32	;' '
   206  0707  3463               	retlw	99	;'c'
   207  0708  346F               	retlw	111	;'o'
   208  0709  346D               	retlw	109	;'m'
   209  070A  3400               	retlw	0
   210                           
   211                           ; #config settings
   212  0000                     
   213                           	psect	cinit
   214  07F4                     start_initialization:	
   215  07F4                     __initialization:	
   216                           
   217                           ; Initialize objects allocated to BANK0
   218  07F4  300B               	movlw	low __pidataBANK0
   219  07F5  0084               	movwf	4
   220  07F6  3087               	movlw	(high __pidataBANK0)| (0+128)
   221  07F7  0085               	movwf	5
   222  07F8  3020               	movlw	low __pdataBANK0
   223  07F9  0086               	movwf	6
   224  07FA  3000               	movlw	high __pdataBANK0
   225  07FB  0087               	movwf	7
   226  07FC  3009               	movlw	9
   227  07FD  26FD               	fcall	init_ram
   228  07FE                     end_of_initialization:	
   229                           ;End of C runtime variable initialization code
   230                           
   231  07FE                     __end_of__initialization:	
   232  07FE  0020               	movlb	0
   233  07FF  2FC3               	ljmp	_main	;jump to C main() function
   234                           
   235                           	psect	dataBANK0
   236  0020                     __pdataBANK0:	
   237  0020                     main@F2209:	
   238  0020                     	ds	9
   239                           
   240                           	psect	inittext
   241  06FD                     init_ram:	
   242  06FD  00FE               	movwf	126
   243  06FE                     initloop:	
   244  06FE  0012               	moviw fsr0++
   245  06FF  001E               	movwi fsr1++
   246  0700  0BFE               	decfsz	126,f
   247  0701  2EFE               	goto	initloop
   248  0702  3400               	retlw	0
   249                           
   250                           	psect	cstackCOMMON
   251  0070                     __pcstackCOMMON:	
   252  0070                     ?_LCD_int:	
   253  0070                     ?_LCD_str:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_i2cTxData:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ??_i2cTxData:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_main:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_LCD_dat:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_LCD_cmd:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     i2cTxData@data:	
   272                           ; 1 bytes @ 0x0
   273                           
   274                           
   275                           ; 1 bytes @ 0x0
   276  0070                     	ds	1
   277  0071                     ?_i2cByteWrite:	
   278  0071                     i2cByteWrite@cont:	
   279                           ; 1 bytes @ 0x1
   280                           
   281                           
   282                           ; 1 bytes @ 0x1
   283  0071                     	ds	1
   284  0072                     i2cByteWrite@data:	
   285                           
   286                           ; 1 bytes @ 0x2
   287  0072                     	ds	1
   288  0073                     ??_i2cByteWrite:	
   289  0073                     i2cByteWrite@addr:	
   290                           ; 1 bytes @ 0x3
   291                           
   292                           
   293                           ; 1 bytes @ 0x3
   294  0073                     	ds	1
   295  0074                     ??_LCD_dat:	
   296  0074                     ??_LCD_cmd:	
   297                           ; 1 bytes @ 0x4
   298                           
   299                           
   300                           ; 1 bytes @ 0x4
   301  0074                     	ds	1
   302  0075                     LCD_cmd@cmd:	
   303                           
   304                           ; 1 bytes @ 0x5
   305  0075                     	ds	1
   306  0076                     ??_LCD_int:	
   307  0076                     ?_LCD_posyx:	
   308                           ; 1 bytes @ 0x6
   309                           
   310  0076                     LCD_dat@chr:	
   311                           ; 1 bytes @ 0x6
   312                           
   313  0076                     LCD_posyx@xpos:	
   314                           ; 1 bytes @ 0x6
   315                           
   316                           
   317                           ; 1 bytes @ 0x6
   318  0076                     	ds	1
   319  0077                     ??_LCD_str:	
   320  0077                     ??_LCD_posyx:	
   321                           ; 1 bytes @ 0x7
   322                           
   323  0077                     ?_LCD_ROMstr:	
   324                           ; 1 bytes @ 0x7
   325                           
   326  0077                     LCD_ROMstr@str:	
   327                           ; 1 bytes @ 0x7
   328                           
   329                           
   330                           ; 2 bytes @ 0x7
   331  0077                     	ds	1
   332  0078                     LCD_str@str:	
   333                           
   334                           ; 1 bytes @ 0x8
   335  0078                     	ds	1
   336  0079                     ??_LCD_ROMstr:	
   337  0079                     LCD_posyx@ypos:	
   338                           ; 1 bytes @ 0x9
   339                           
   340                           
   341                           ; 1 bytes @ 0x9
   342  0079                     	ds	1
   343  007A                     LCD_posyx@pcode:	
   344                           
   345                           ; 1 bytes @ 0xA
   346  007A                     	ds	1
   347  007B                     ??_main:	
   348                           
   349                           ; 1 bytes @ 0xB
   350  007B                     	ds	1
   351                           
   352                           	psect	cstackBANK0
   353  0029                     __pcstackBANK0:	
   354  0029                     main@msgStart:	
   355                           
   356                           ; 9 bytes @ 0x0
   357  0029                     	ds	9
   358                           
   359                           	psect	maintext
   360  07C3                     __pmaintext:	
   361 ;;
   362 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   363 ;;
   364 ;; *************** function _main *****************
   365 ;; Defined at:
   366 ;;		line 42 in file "test01.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;  msgStart        9    0[BANK0 ] unsigned char [9]
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   375 ;; Tracked objects:
   376 ;;		On entry : B1F/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMMON   BANK0   BANK1
   380 ;;      Params:         0       0       0
   381 ;;      Locals:         0       9       0
   382 ;;      Temps:          1       0       0
   383 ;;      Totals:         1       9       0
   384 ;;Total ram usage:       10 bytes
   385 ;; Hardware stack levels required when called:    4
   386 ;; This function calls:
   387 ;;		_LCD_ROMstr
   388 ;;		_LCD_int
   389 ;;		_LCD_posyx
   390 ;;		_LCD_str
   391 ;; This function is called by:
   392 ;;		Startup code after reset
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396                           
   397                           ;psect for function _main
   398  07C3                     _main:	
   399                           
   400                           ;test01.c: 43: char msgStart[] ="LCD Test";
   401                           
   402                           ;incstack = 0
   403                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   404  07C3  3020               	movlw	low main@F2209
   405  07C4  0086               	movwf	6
   406  07C5  3000               	movlw	high main@F2209
   407  07C6  0087               	movwf	7
   408  07C7  3029               	movlw	low main@msgStart
   409  07C8  0084               	movwf	4
   410  07C9  3000               	movlw	high main@msgStart
   411  07CA  0085               	movwf	5
   412  07CB  3009               	movlw	9
   413  07CC  00FB               	movwf	??_main
   414  07CD                     u140:	
   415  07CD  0016               	moviw fsr1++
   416  07CE  001A               	movwi fsr0++
   417  07CF  0BFB               	decfsz	??_main,f
   418  07D0  2FCD               	goto	u140
   419                           
   420                           ;test01.c: 45: OSCCON = 0b01101010;
   421  07D1  306A               	movlw	106
   422  07D2  0021               	movlb	1	; select bank1
   423  07D3  0099               	movwf	25	;volatile
   424                           
   425                           ;test01.c: 46: PORTA = 0x00;
   426  07D4  0020               	movlb	0	; select bank0
   427  07D5  018C               	clrf	12	;volatile
   428                           
   429                           ;test01.c: 47: TRISA = 0xFF;
   430  07D6  30FF               	movlw	255
   431  07D7  0021               	movlb	1	; select bank1
   432  07D8  008C               	movwf	12	;volatile
   433                           
   434                           ;test01.c: 48: ANSELA = 0x00;
   435  07D9  0023               	movlb	3	; select bank3
   436  07DA  018C               	clrf	12	;volatile
   437                           
   438                           ;test01.c: 49: WPUA = 0xFF;
   439  07DB  30FF               	movlw	255
   440  07DC  0024               	movlb	4	; select bank4
   441  07DD  008C               	movwf	12	;volatile
   442                           
   443                           ;test01.c: 50: nWPUEN = 0;
   444  07DE  0021               	movlb	1	; select bank1
   445  07DF  1395               	bcf	21,7	;volatile
   446                           
   447                           ;test01.c: 52: SSP1STAT = 0b10000000;
   448  07E0  3080               	movlw	128
   449  07E1  0024               	movlb	4	; select bank4
   450  07E2  0094               	movwf	20	;volatile
   451                           
   452                           ;test01.c: 53: SSP1ADD = 9;
   453  07E3  3009               	movlw	9
   454  07E4  0092               	movwf	18	;volatile
   455                           
   456                           ;test01.c: 54: SSP1CON1 = 0b00101000;
   457  07E5  3028               	movlw	40
   458  07E6  0095               	movwf	21	;volatile
   459                           
   460                           ;test01.c: 56: LCD_int();
   461  07E7  279B               	fcall	_LCD_int
   462                           
   463                           ;test01.c: 57: LCD_str(msgStart);
   464  07E8  3029               	movlw	(low (main@msgStart| 0))& (0+255)
   465  07E9  273E               	fcall	_LCD_str
   466                           
   467                           ;test01.c: 58: LCD_posyx(1,1);
   468  07EA  01F6               	clrf	LCD_posyx@xpos
   469  07EB  0AF6               	incf	LCD_posyx@xpos,f
   470  07EC  3001               	movlw	1
   471  07ED  277A               	fcall	_LCD_posyx
   472                           
   473                           ;test01.c: 59: LCD_ROMstr("I2C com");
   474  07EE  3003               	movlw	low (STR_1| (0+32768))
   475  07EF  00F7               	movwf	LCD_ROMstr@str
   476  07F0  3087               	movlw	high (STR_1| (0+32768))
   477  07F1  00F8               	movwf	LCD_ROMstr@str+1
   478  07F2  274F               	fcall	_LCD_ROMstr
   479  07F3                     l41:	
   480                           ;test01.c: 60: while(1);
   481                           
   482  07F3  2FF3               	goto	l41
   483  07F4                     __end_of_main:	
   484                           
   485                           	psect	text1
   486  073E                     __ptext1:	
   487 ;; *************** function _LCD_str *****************
   488 ;; Defined at:
   489 ;;		line 128 in file "test01.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;  str             1    wreg     PTR unsigned char 
   492 ;;		 -> main@msgStart(9), 
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  str             1    8[COMMON] PTR unsigned char 
   495 ;;		 -> main@msgStart(9), 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMMON   BANK0   BANK1
   505 ;;      Params:         0       0       0
   506 ;;      Locals:         1       0       0
   507 ;;      Temps:          1       0       0
   508 ;;      Totals:         2       0       0
   509 ;;Total ram usage:        2 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    3
   512 ;; This function calls:
   513 ;;		_LCD_dat
   514 ;; This function is called by:
   515 ;;		_main
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           
   520                           ;psect for function _LCD_str
   521  073E                     _LCD_str:	
   522                           
   523                           ;incstack = 0
   524                           ; Regs used in _LCD_str: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   525                           ;LCD_str@str stored from wreg
   526  073E  00F8               	movwf	LCD_str@str
   527  073F                     l724:	
   528                           ;test01.c: 129: while(*str)
   529                           
   530  073F  0878               	movf	LCD_str@str,w
   531  0740  0086               	movwf	6
   532  0741  0187               	clrf	7
   533  0742  0801               	movf	1,w
   534  0743  1903               	btfsc	3,2
   535  0744  0008               	return
   536                           
   537                           ;test01.c: 130: LCD_dat(*str++);
   538  0745  0878               	movf	LCD_str@str,w
   539  0746  0086               	movwf	6
   540  0747  0187               	clrf	7
   541  0748  0801               	movf	1,w
   542  0749  272E               	fcall	_LCD_dat
   543  074A  3001               	movlw	1
   544  074B  00F7               	movwf	??_LCD_str
   545  074C  0877               	movf	??_LCD_str,w
   546  074D  07F8               	addwf	LCD_str@str,f
   547  074E  2F3F               	goto	l724
   548  074F                     __end_of_LCD_str:	
   549                           
   550                           	psect	text2
   551  077A                     __ptext2:	
   552 ;; *************** function _LCD_posyx *****************
   553 ;; Defined at:
   554 ;;		line 103 in file "test01.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;  ypos            1    wreg     unsigned char 
   557 ;;  xpos            1    6[COMMON] unsigned char 
   558 ;; Auto vars:     Size  Location     Type
   559 ;;  ypos            1    9[COMMON] unsigned char 
   560 ;;  pcode           1   10[COMMON] unsigned char 
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMMON   BANK0   BANK1
   570 ;;      Params:         1       0       0
   571 ;;      Locals:         2       0       0
   572 ;;      Temps:          2       0       0
   573 ;;      Totals:         5       0       0
   574 ;;Total ram usage:        5 bytes
   575 ;; Hardware stack levels used:    1
   576 ;; Hardware stack levels required when called:    3
   577 ;; This function calls:
   578 ;;		_LCD_cmd
   579 ;; This function is called by:
   580 ;;		_main
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           
   585                           ;psect for function _LCD_posyx
   586  077A                     _LCD_posyx:	
   587                           
   588                           ;incstack = 0
   589                           ; Regs used in _LCD_posyx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   590                           ;LCD_posyx@ypos stored from wreg
   591  077A  00F9               	movwf	LCD_posyx@ypos
   592                           
   593                           ;test01.c: 104: unsigned char pcode;
   594                           ;test01.c: 105: switch(ypos & 0x03){
   595  077B  2F83               	goto	l734
   596  077C                     l728:	
   597                           ;test01.c: 106: case 0: pcode=0x80;break;
   598                           
   599  077C  3080               	movlw	128
   600  077D  2F7F               	goto	L1
   601  077E                     l730:	
   602                           ;test01.c: 107: case 1: pcode=0xC0;break;
   603                           
   604  077E  30C0               	movlw	192
   605  077F                     L1:	
   606  077F  00F7               	movwf	??_LCD_posyx
   607  0780  0877               	movf	??_LCD_posyx,w
   608  0781  00FA               	movwf	LCD_posyx@pcode
   609                           
   610                           ;test01.c: 108: }
   611  0782  2F94               	goto	l736
   612  0783                     l734:	
   613  0783  0879               	movf	LCD_posyx@ypos,w
   614  0784  3903               	andlw	3
   615  0785  00F7               	movwf	??_LCD_posyx
   616  0786  01F8               	clrf	??_LCD_posyx+1
   617                           
   618                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   619                           ; Switch size 1, requested type "space"
   620                           ; Number of cases is 1, Range of values is 0 to 0
   621                           ; switch strategies available:
   622                           ; Name         Instructions Cycles
   623                           ; simple_byte            4     3 (average)
   624                           ; direct_byte            8     6 (fixed)
   625                           ; jumptable            260     6 (fixed)
   626                           ;	Chosen strategy is simple_byte
   627  0787  0878               	movf	??_LCD_posyx+1,w
   628  0788  3A00               	xorlw	0	; case 0
   629  0789  1903               	skipnz
   630  078A  2F8C               	goto	l800
   631  078B  2F94               	goto	l736
   632  078C                     l800:	
   633                           
   634                           ; Switch size 1, requested type "space"
   635                           ; Number of cases is 2, Range of values is 0 to 1
   636                           ; switch strategies available:
   637                           ; Name         Instructions Cycles
   638                           ; simple_byte            7     4 (average)
   639                           ; direct_byte           10     6 (fixed)
   640                           ; jumptable            260     6 (fixed)
   641                           ;	Chosen strategy is simple_byte
   642  078C  0877               	movf	??_LCD_posyx,w
   643  078D  3A00               	xorlw	0	; case 0
   644  078E  1903               	skipnz
   645  078F  2F7C               	goto	l728
   646  0790  3A01               	xorlw	1	; case 1
   647  0791  1903               	skipnz
   648  0792  2F7E               	goto	l730
   649  0793  2F94               	goto	l736
   650  0794                     l736:	
   651                           
   652                           ;test01.c: 109: LCD_cmd(pcode += xpos);
   653  0794  0876               	movf	LCD_posyx@xpos,w
   654  0795  00F7               	movwf	??_LCD_posyx
   655  0796  0877               	movf	??_LCD_posyx,w
   656  0797  07FA               	addwf	LCD_posyx@pcode,f
   657  0798  087A               	movf	LCD_posyx@pcode,w
   658  0799  2761               	fcall	_LCD_cmd
   659  079A  0008               	return
   660  079B                     __end_of_LCD_posyx:	
   661                           
   662                           	psect	text3
   663  079B                     __ptext3:	
   664 ;; *************** function _LCD_int *****************
   665 ;; Defined at:
   666 ;;		line 112 in file "test01.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;		None
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      void 
   673 ;; Registers used:
   674 ;;		wreg, status,2, status,0, pclath, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMMON   BANK0   BANK1
   680 ;;      Params:         0       0       0
   681 ;;      Locals:         0       0       0
   682 ;;      Temps:          1       0       0
   683 ;;      Totals:         1       0       0
   684 ;;Total ram usage:        1 bytes
   685 ;; Hardware stack levels used:    1
   686 ;; Hardware stack levels required when called:    3
   687 ;; This function calls:
   688 ;;		_LCD_cmd
   689 ;; This function is called by:
   690 ;;		_main
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           
   695                           ;psect for function _LCD_int
   696  079B                     _LCD_int:	
   697                           
   698                           ;test01.c: 113: _delay((unsigned long)((100)*(4000000/4000.0)));
   699                           
   700                           ;incstack = 0
   701                           ; Regs used in _LCD_int: [wreg+status,2+status,0+pclath+cstack]
   702  079B  3082               	movlw	130
   703  079C  00F6               	movwf	??_LCD_int
   704  079D  30DE               	movlw	222
   705  079E                     u157:	
   706  079E  0B89               	decfsz	9,f
   707  079F  2F9E               	goto	u157
   708  07A0  0BF6               	decfsz	??_LCD_int,f
   709  07A1  2F9E               	goto	u157
   710                           
   711                           ;test01.c: 114: LCD_cmd(0x38);
   712  07A2  3038               	movlw	56
   713  07A3  2761               	fcall	_LCD_cmd
   714                           
   715                           ;test01.c: 115: LCD_cmd(0x39);
   716  07A4  3039               	movlw	57
   717  07A5  2761               	fcall	_LCD_cmd
   718                           
   719                           ;test01.c: 116: LCD_cmd(0x14);
   720  07A6  3014               	movlw	20
   721  07A7  2761               	fcall	_LCD_cmd
   722                           
   723                           ;test01.c: 118: LCD_cmd(0x70 + (0x28 & 0x0F));
   724  07A8  3078               	movlw	120
   725  07A9  2761               	fcall	_LCD_cmd
   726                           
   727                           ;test01.c: 119: LCD_cmd(0x5C + (0x28 >> 4));
   728  07AA  305E               	movlw	94
   729  07AB  2761               	fcall	_LCD_cmd
   730                           
   731                           ;test01.c: 120: LCD_cmd(0x6B);
   732  07AC  306B               	movlw	107
   733  07AD  2761               	fcall	_LCD_cmd
   734                           
   735                           ;test01.c: 121: _delay((unsigned long)((100)*(4000000/4000.0)));
   736  07AE  3082               	movlw	130
   737  07AF  00F6               	movwf	??_LCD_int
   738  07B0  30DE               	movlw	222
   739  07B1                     u167:	
   740  07B1  0B89               	decfsz	9,f
   741  07B2  2FB1               	goto	u167
   742  07B3  0BF6               	decfsz	??_LCD_int,f
   743  07B4  2FB1               	goto	u167
   744                           
   745                           ;test01.c: 122: _delay((unsigned long)((100)*(4000000/4000.0)));
   746  07B5  3082               	movlw	130
   747  07B6  00F6               	movwf	??_LCD_int
   748  07B7  30DE               	movlw	222
   749  07B8                     u177:	
   750  07B8  0B89               	decfsz	9,f
   751  07B9  2FB8               	goto	u177
   752  07BA  0BF6               	decfsz	??_LCD_int,f
   753  07BB  2FB8               	goto	u177
   754                           
   755                           ;test01.c: 123: LCD_cmd(0x38);
   756  07BC  3038               	movlw	56
   757  07BD  2761               	fcall	_LCD_cmd
   758                           
   759                           ;test01.c: 124: LCD_cmd(0x0C);
   760  07BE  300C               	movlw	12
   761  07BF  2761               	fcall	_LCD_cmd
   762                           
   763                           ;test01.c: 125: LCD_cmd(0x01);
   764  07C0  3001               	movlw	1
   765  07C1  2761               	fcall	_LCD_cmd
   766  07C2  0008               	return
   767  07C3                     __end_of_LCD_int:	
   768                           
   769                           	psect	text4
   770  0761                     __ptext4:	
   771 ;; *************** function _LCD_cmd *****************
   772 ;; Defined at:
   773 ;;		line 91 in file "test01.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  cmd             1    wreg     unsigned char 
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  cmd             1    5[COMMON] unsigned char 
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, status,2, status,0, pclath, cstack
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMMON   BANK0   BANK1
   787 ;;      Params:         0       0       0
   788 ;;      Locals:         1       0       0
   789 ;;      Temps:          1       0       0
   790 ;;      Totals:         2       0       0
   791 ;;Total ram usage:        2 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; Hardware stack levels required when called:    2
   794 ;; This function calls:
   795 ;;		_i2cByteWrite
   796 ;; This function is called by:
   797 ;;		_LCD_posyx
   798 ;;		_LCD_int
   799 ;;		_LCD_clr
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           
   804                           ;psect for function _LCD_cmd
   805  0761                     _LCD_cmd:	
   806                           
   807                           ;incstack = 0
   808                           ; Regs used in _LCD_cmd: [wreg+status,2+status,0+pclath+cstack]
   809                           ;LCD_cmd@cmd stored from wreg
   810  0761  00F5               	movwf	LCD_cmd@cmd
   811                           
   812                           ;test01.c: 92: i2cByteWrite(0x7C, 0x00, cmd);
   813  0762  01F1               	clrf	i2cByteWrite@cont
   814  0763  0875               	movf	LCD_cmd@cmd,w
   815  0764  00F4               	movwf	??_LCD_cmd
   816  0765  0874               	movf	??_LCD_cmd,w
   817  0766  00F2               	movwf	i2cByteWrite@data
   818  0767  307C               	movlw	124
   819  0768  271E               	fcall	_i2cByteWrite
   820                           
   821                           ;test01.c: 93: if(cmd & 0xFC)
   822  0769  0875               	movf	LCD_cmd@cmd,w
   823  076A  39FC               	andlw	252
   824  076B  1903               	btfsc	3,2
   825  076C  2F72               	goto	l696
   826                           
   827                           ;test01.c: 94: _delay((unsigned long)((50)*(4000000/4000000.0)));
   828  076D  3010               	movlw	16
   829  076E                     u187:	
   830  076E  0B89               	decfsz	9,f
   831  076F  2F6E               	goto	u187
   832  0770  3200               	nop2
   833  0771  0008               	return
   834  0772                     l696:	
   835                           
   836                           ;test01.c: 95: else
   837                           ;test01.c: 96: _delay((unsigned long)((2)*(4000000/4000.0)));
   838  0772  3003               	movlw	3
   839  0773  00F4               	movwf	??_LCD_cmd
   840  0774  3098               	movlw	152
   841  0775                     u197:	
   842  0775  0B89               	decfsz	9,f
   843  0776  2F75               	goto	u197
   844  0777  0BF4               	decfsz	??_LCD_cmd,f
   845  0778  2F75               	goto	u197
   846  0779  0008               	return
   847  077A                     __end_of_LCD_cmd:	
   848                           
   849                           	psect	text5
   850  074F                     __ptext5:	
   851 ;; *************** function _LCD_ROMstr *****************
   852 ;; Defined at:
   853 ;;		line 133 in file "test01.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  str             2    7[COMMON] PTR const unsigned char 
   856 ;;		 -> STR_1(8), 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1
   868 ;;      Params:         2       0       0
   869 ;;      Locals:         0       0       0
   870 ;;      Temps:          1       0       0
   871 ;;      Totals:         3       0       0
   872 ;;Total ram usage:        3 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    3
   875 ;; This function calls:
   876 ;;		_LCD_dat
   877 ;; This function is called by:
   878 ;;		_main
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function _LCD_ROMstr
   884  074F                     _LCD_ROMstr:	
   885  074F                     l748:	
   886                           ;test01.c: 134: while(*str)
   887                           
   888                           ;incstack = 0
   889                           ; Regs used in _LCD_ROMstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   890                           
   891  074F  0877               	movf	LCD_ROMstr@str,w
   892  0750  0084               	movwf	4
   893  0751  0878               	movf	LCD_ROMstr@str+1,w
   894  0752  0085               	movwf	5
   895  0753  0012               	moviw fsr0++
   896  0754  1903               	btfsc	3,2
   897  0755  0008               	return
   898                           
   899                           ;test01.c: 135: LCD_dat(*str++);
   900  0756  0877               	movf	LCD_ROMstr@str,w
   901  0757  0084               	movwf	4
   902  0758  0878               	movf	LCD_ROMstr@str+1,w
   903  0759  0085               	movwf	5
   904  075A  0800               	movf	0,w	;code access
   905  075B  272E               	fcall	_LCD_dat
   906  075C  3001               	movlw	1
   907  075D  07F7               	addwf	LCD_ROMstr@str,f
   908  075E  3000               	movlw	0
   909  075F  3DF8               	addwfc	LCD_ROMstr@str+1,f
   910  0760  2F4F               	goto	l748
   911  0761                     __end_of_LCD_ROMstr:	
   912                           
   913                           	psect	text6
   914  072E                     __ptext6:	
   915 ;; *************** function _LCD_dat *****************
   916 ;; Defined at:
   917 ;;		line 86 in file "test01.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  chr             1    wreg     unsigned char 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  chr             1    6[COMMON] unsigned char 
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0, pclath, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1
   931 ;;      Params:         0       0       0
   932 ;;      Locals:         1       0       0
   933 ;;      Temps:          2       0       0
   934 ;;      Totals:         3       0       0
   935 ;;Total ram usage:        3 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    2
   938 ;; This function calls:
   939 ;;		_i2cByteWrite
   940 ;; This function is called by:
   941 ;;		_LCD_str
   942 ;;		_LCD_ROMstr
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           
   947                           ;psect for function _LCD_dat
   948  072E                     _LCD_dat:	
   949                           
   950                           ;incstack = 0
   951                           ; Regs used in _LCD_dat: [wreg+status,2+status,0+pclath+cstack]
   952                           ;LCD_dat@chr stored from wreg
   953  072E  00F6               	movwf	LCD_dat@chr
   954                           
   955                           ;test01.c: 87: i2cByteWrite(0x7C, 0x40, chr);
   956  072F  3040               	movlw	64
   957  0730  00F4               	movwf	??_LCD_dat
   958  0731  0874               	movf	??_LCD_dat,w
   959  0732  00F1               	movwf	i2cByteWrite@cont
   960  0733  0876               	movf	LCD_dat@chr,w
   961  0734  00F5               	movwf	??_LCD_dat+1
   962  0735  0875               	movf	??_LCD_dat+1,w
   963  0736  00F2               	movwf	i2cByteWrite@data
   964  0737  307C               	movlw	124
   965  0738  271E               	fcall	_i2cByteWrite
   966                           
   967                           ;test01.c: 88: _delay((unsigned long)((50)*(4000000/4000000.0)));
   968  0739  3010               	movlw	16
   969  073A                     u207:	
   970  073A  0B89               	decfsz	9,f
   971  073B  2F3A               	goto	u207
   972  073C  3200               	nop2
   973  073D  0008               	return
   974  073E                     __end_of_LCD_dat:	
   975                           
   976                           	psect	text7
   977  071E                     __ptext7:	
   978 ;; *************** function _i2cByteWrite *****************
   979 ;; Defined at:
   980 ;;		line 67 in file "test01.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  addr            1    wreg     unsigned char 
   983 ;;  cont            1    1[COMMON] unsigned char 
   984 ;;  data            1    2[COMMON] unsigned char 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  addr            1    3[COMMON] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0, pclath, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1
   996 ;;      Params:         2       0       0
   997 ;;      Locals:         1       0       0
   998 ;;      Temps:          0       0       0
   999 ;;      Totals:         3       0       0
  1000 ;;Total ram usage:        3 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    1
  1003 ;; This function calls:
  1004 ;;		_i2cTxData
  1005 ;; This function is called by:
  1006 ;;		_LCD_dat
  1007 ;;		_LCD_cmd
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           
  1012                           ;psect for function _i2cByteWrite
  1013  071E                     _i2cByteWrite:	
  1014                           
  1015                           ;incstack = 0
  1016                           ; Regs used in _i2cByteWrite: [wreg+status,2+status,0+pclath+cstack]
  1017                           ;i2cByteWrite@addr stored from wreg
  1018  071E  00F3               	movwf	i2cByteWrite@addr
  1019                           
  1020                           ;test01.c: 68: SSP1CON2bits.SEN = 1;
  1021  071F  0024               	movlb	4	; select bank4
  1022  0720  1416               	bsf	22,0	;volatile
  1023  0721                     l47:	
  1024                           ;test01.c: 69: while(SSP1CON2bits.SEN);
  1025                           
  1026  0721  1816               	btfsc	22,0	;volatile
  1027  0722  2F21               	goto	l47
  1028                           
  1029                           ;test01.c: 70: i2cTxData(addr);
  1030  0723  0873               	movf	i2cByteWrite@addr,w
  1031  0724  2714               	fcall	_i2cTxData
  1032                           
  1033                           ;test01.c: 71: i2cTxData(cont);
  1034  0725  0871               	movf	i2cByteWrite@cont,w
  1035  0726  2714               	fcall	_i2cTxData
  1036                           
  1037                           ;test01.c: 72: i2cTxData(data);
  1038  0727  0872               	movf	i2cByteWrite@data,w
  1039  0728  2714               	fcall	_i2cTxData
  1040                           
  1041                           ;test01.c: 73: SSP1CON2bits.PEN = 1;
  1042  0729  0024               	movlb	4	; select bank4
  1043  072A  1516               	bsf	22,2	;volatile
  1044  072B                     l50:	
  1045                           ;test01.c: 74: while(SSP1CON2bits.PEN);
  1046                           
  1047  072B  1D16               	btfss	22,2	;volatile
  1048  072C  0008               	return
  1049  072D  2F2B               	goto	l50
  1050  072E                     __end_of_i2cByteWrite:	
  1051                           
  1052                           	psect	text8
  1053  0714                     __ptext8:	
  1054 ;; *************** function _i2cTxData *****************
  1055 ;; Defined at:
  1056 ;;		line 77 in file "test01.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  data            1    wreg     unsigned char 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  data            1    0[COMMON] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1
  1070 ;;      Params:         0       0       0
  1071 ;;      Locals:         1       0       0
  1072 ;;      Temps:          0       0       0
  1073 ;;      Totals:         1       0       0
  1074 ;;Total ram usage:        1 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_i2cByteWrite
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           
  1084                           ;psect for function _i2cTxData
  1085  0714                     _i2cTxData:	
  1086                           
  1087                           ;incstack = 0
  1088                           ; Regs used in _i2cTxData: [wreg]
  1089                           ;i2cTxData@data stored from wreg
  1090  0714  00F0               	movwf	i2cTxData@data
  1091                           
  1092                           ;test01.c: 78: PIR1bits.SSP1IF = 0;
  1093  0715  0020               	movlb	0	; select bank0
  1094  0716  1191               	bcf	17,3	;volatile
  1095                           
  1096                           ;test01.c: 79: SSP1BUF = data;
  1097  0717  0870               	movf	i2cTxData@data,w
  1098  0718  0024               	movlb	4	; select bank4
  1099  0719  0091               	movwf	17	;volatile
  1100  071A                     l56:	
  1101                           ;test01.c: 80: while(!PIR1bits.SSP1IF);
  1102                           
  1103  071A  0020               	movlb	0	; select bank0
  1104  071B  1991               	btfsc	17,3	;volatile
  1105  071C  0008               	return
  1106  071D  2F1A               	goto	l56
  1107  071E                     __end_of_i2cTxData:	
  1108  007E                     btemp	set	126	;btemp
  1109  007E                     wtemp0	set	126


Data Sizes:
    Strings     8
    Constant    0
    Data        9
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      9      18
    BANK1            32      0       0

Pointer List with Targets:

    LCD_ROMstr@str	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    LCD_str@str	PTR unsigned char  size(1) Largest target is 9
		 -> main@msgStart(BANK0[9]), 


Critical Paths under _main in COMMON

    _main->_LCD_posyx
    _LCD_str->_LCD_dat
    _LCD_posyx->_LCD_cmd
    _LCD_int->_LCD_cmd
    _LCD_cmd->_i2cByteWrite
    _LCD_ROMstr->_LCD_dat
    _LCD_dat->_i2cByteWrite
    _i2cByteWrite->_i2cTxData

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    1648
                                             11 COMMON     1     1      0
                                              0 BANK0      9     9      0
                         _LCD_ROMstr
                            _LCD_int
                          _LCD_posyx
                            _LCD_str
 ---------------------------------------------------------------------------------
 (1) _LCD_str                                              2     2      0     394
                                              7 COMMON     2     2      0
                            _LCD_dat
 ---------------------------------------------------------------------------------
 (1) _LCD_posyx                                            5     4      1     465
                                              6 COMMON     5     4      1
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_int                                              1     1      0     344
                                              6 COMMON     1     1      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_cmd                                              2     2      0     344
                                              4 COMMON     2     2      0
                       _i2cByteWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_ROMstr                                           3     1      2     420
                                              7 COMMON     3     1      2
                            _LCD_dat
 ---------------------------------------------------------------------------------
 (2) _LCD_dat                                              3     3      0     322
                                              4 COMMON     3     3      0
                       _i2cByteWrite
 ---------------------------------------------------------------------------------
 (3) _i2cByteWrite                                         3     1      2     300
                                              1 COMMON     3     1      2
                          _i2cTxData
 ---------------------------------------------------------------------------------
 (4) _i2cTxData                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_ROMstr
     _LCD_dat
       _i2cByteWrite
         _i2cTxData
   _LCD_int
     _LCD_cmd
       _i2cByteWrite
         _i2cTxData
   _LCD_posyx
     _LCD_cmd
       _i2cByteWrite
         _i2cTxData
   _LCD_str
     _LCD_dat
       _i2cByteWrite
         _i2cTxData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      12       6       22.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      1E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Feb 24 14:19:17 2017

            __CFG_CP$OFF 0000                       l41 07F3                       l50 072B  
                     l47 0721                       l56 071A                      l800 078C  
                    l730 077E                      l724 073F                      l734 0783  
                    l736 0794                      l728 077C                      l748 074F  
                    l696 0772                      u140 07CD                      u207 073A  
                    u157 079E                      u167 07B1                      u177 07B8  
           __CFG_CPD$OFF 0000                      u187 076E                      u197 0775  
           __CFG_BORV$LO 0000           ??_i2cByteWrite 0073                      wreg 0009  
           __CFG_LVP$OFF 0000          __end_of_LCD_dat 073E          __end_of_LCD_cmd 077A  
        __end_of_LCD_int 07C3          __end_of_LCD_str 074F                     STR_1 0703  
                   _WPUA 020C             __CFG_WRT$OFF 0000                     _main 07C3  
                   fsr0h 0005                     fsr1h 0007                     indf0 0000  
                   fsr0l 0004                     indf1 0001                     fsr1l 0006  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0001  
          __CFG_IESO$OFF 0000       __size_of_LCD_posyx 0021         i2cByteWrite@addr 0073  
       i2cByteWrite@data 0072         i2cByteWrite@cont 0071                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTA 000C                    _TRISA 008C  
         __CFG_FCMEN$OFF 0000             main@msgStart 0029            i2cTxData@data 0070  
    __size_of_LCD_ROMstr 0012                    status 0003                    wtemp0 007E  
         __CFG_MCLRE$OFF 0000          __initialization 07F4             __end_of_main 07F4  
                 ??_main 007B           __CFG_PLLEN$OFF 0000                ??_LCD_dat 0074  
              ??_LCD_cmd 0074                ??_LCD_int 0076                ??_LCD_str 0077  
          LCD_ROMstr@str 0077        __end_of_LCD_posyx 079B                   _ANSELA 018C  
     __size_of_i2cTxData 000A                   _OSCCON 0099           __CFG_PWRTE$OFF 0000  
   __end_of_i2cByteWrite 072E                   _nWPUEN 04AF           __CFG_STVREN$ON 0000  
__end_of__initialization 07FE             ??_LCD_ROMstr 0079           __pcstackCOMMON 0070  
           __pidataBANK0 070B           LCD_posyx@pcode 007A        __end_of_i2cTxData 071E  
     __end_of_LCD_ROMstr 0761               __pmaintext 07C3                  _LCD_dat 072E  
                _LCD_cmd 0761                  _LCD_int 079B                  _LCD_str 073E  
                _SSP1ADD 0212                  _SSP1BUF 0211    __size_of_i2cByteWrite 0010  
                __ptext1 073E                  __ptext2 077A                  __ptext3 079B  
                __ptext4 0761                  __ptext5 074F                  __ptext6 072E  
                __ptext7 071E                  __ptext8 0714             _i2cByteWrite 071E  
   end_of_initialization 07FE                _LCD_posyx 077A                  init_ram 06FD  
                initloop 06FE             __pstringtext 0703         __CFG_FOSC$INTOSC 0000  
             ?_LCD_posyx 0076               LCD_dat@chr 0076               LCD_cmd@cmd 0075  
              _i2cTxData 0714      start_initialization 07F4               LCD_str@str 0078  
            __pdataBANK0 0020               ?_i2cTxData 0070                 ?_LCD_dat 0070  
               ?_LCD_cmd 0070                 ?_LCD_int 0070                 ?_LCD_str 0070  
              ___latbits 0000            __pcstackBANK0 0029            LCD_posyx@xpos 0076  
          LCD_posyx@ypos 0079              ??_LCD_posyx 0077                 _PIR1bits 0011  
              main@F2209 0020                 _SSP1CON1 0215                 _SSP1STAT 0214  
            ??_i2cTxData 0070         __size_of_LCD_dat 0010         __size_of_LCD_cmd 0019  
       __size_of_LCD_int 0028         __size_of_LCD_str 0011             _SSP1CON2bits 0216  
          __size_of_main 0031               _LCD_ROMstr 074F        __CFG_CLKOUTEN$OFF 0000  
          ?_i2cByteWrite 0071              ?_LCD_ROMstr 0077  
